{\rtf1\ansi\ansicpg1251\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue0;
\red203\green203\blue202;\red0\green0\blue0;\red203\green203\blue202;\red141\green213\blue254;\red71\green138\blue206;
\red0\green0\blue0;\red211\green213\blue151;\red204\green204\blue202;\red168\green197\blue150;\red204\green204\blue202;
\red185\green112\blue179;}
{\*\expandedcolortbl;;\cssrgb\c0\c1\c1;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c1\c1;
\cssrgb\c83320\c83320\c83112;\cssrgb\c0\c1\c1;\cssrgb\c83320\c83320\c83112;\cssrgb\c61545\c86704\c99884;\cssrgb\c34146\c61677\c84338;
\cssrgb\c0\c1\c1;\cssrgb\c86148\c86019\c65549;\cssrgb\c83858\c83855\c83021;\cssrgb\c71186\c80954\c65244;\cssrgb\c83770\c83767\c83038;
\cssrgb\c77854\c53133\c75328;}
\paperw11900\paperh16840\margl1440\margr1440\vieww18180\viewh7600\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
#include <stdio.h>\uc0\u8232 \cf4 #include\cf2  <unistd.h>\uc0\u8232 \cf4 #include\cf2  <string.h>\uc0\u8232 \cf4 #include \cf2 <math.h>\uc0\u8232 \cf4 #include \cf2 <stdlib.h>\uc0\u8232 \cf4 #include\cf2  <math.h>\uc0\u8232 \cf4 #include \cf2  <time.h>\uc0\u8232 \cf4 #include\cf2  <sys/time.h>\
#include <mpi.h>\uc0\u8232 \u8232 \cf4 #define\cf2  NI 60\uc0\u8232 \cf4 #define\cf2  NJ 60\uc0\u8232 \cf4 #define \cf2 NK 60\uc0\u8232 \u8232 \u8232 static\u8232 void init_array(int ni, int nj, int nk,float {\field{\*\fldinst{HYPERLINK "https://vk.com/alpha"}}{\fldrslt \cf2 *alpha}},float *beta, float C[ni][nj], float A[ni][nk], float B[nk][nj], float cMPI[ni][nj], float cMPI_Res[ni][nj])\{\uc0\u8232 	int i, j;\u8232 \u8232 	{\field{\*\fldinst{HYPERLINK "https://vk.com/alpha"}}{\fldrslt \cf2 *alpha}} = 1.5;\uc0\u8232 	*beta = 1.2;\u8232 	for (i = 0; i < ni; i++)\u8232 		for (j = 0; j < nj; j++)\u8232 			C[i][j] = (float) ((i*j+1) % ni) / ni;\u8232 	for (i = 0; i < ni; i++)\u8232 		for (j = 0; j < nk; j++)\u8232 			A[i][j] = (float) (i*(j+1) % nk) / nk;\u8232 	for (i = 0; i < nk; i++)\u8232 		for (j = 0; j < nj; j++)\u8232 			B[i][j] = (float) (i*(j+2) % nj) / nj;\
	for (i = 0; i < nk; i++)\uc0\u8232 		for (j = 0; j < nj; j++)\u8232 			cMPI[i][j] = 0;\
	for (i = 0; i < nk; i++)\uc0\u8232 		for (j = 0; j < nj; j++)\u8232 			cMPI_Res[i][j] = 0;\
\}\uc0\u8232 \u8232 static\u8232 void print_array(int ni, int nj, float C[ni][nj])\{\u8232 	int i, j;\u8232 	fprintf(stderr, "==BEGIN DUMP_ARRAYS==\\n");\u8232 	fprintf(stderr, "begin dump: %s", "C");\u8232 	for (i = 0; i < ni; i++)\u8232 		for (j = 0; j < nj; j++) \{\u8232 			if ((i * ni + j) % 20 == 0) fprintf (stderr, "\\n");\u8232 			fprintf (stderr, "%0.2f ", C[i][j]);\u8232 		\}\u8232 	fprintf(stderr, "\\nend dump: %s\\n", "C");\u8232 	fprintf(stderr, "==END DUMP_ARRAYS==\\n");\u8232 \}\u8232 \u8232 static\u8232 void kernel_gemm(int ni, int nj, int nk, float alpha, float beta, float C[ni][nj], float A[ni][nk], float B[nk][nj], float cMPI[ni][nj], float 
\f1\fs24 \cf4 startIdx, float step
\f0\fs26 \cf2 )\{\uc0\u8232 	int i, j, k;\
	int sum;\uc0\u8232 	for (i = 0; i < ni; i++) \{\u8232 		for (
\f1\fs24 \cf6 \outl0\strokewidth0 \strokec7 j = startIdx; j < nj && j < startIdx + step; j++
\f0\fs26 \cf2 \outl0\strokewidth0 )\{\uc0\u8232 			sum = 0;\u8232 			for (k = 0; k < nk; k++) \{\u8232 				sum +=\cf6  
\f1\fs24 \cf6 \outl0\strokewidth0 \strokec8 A\cf6 \strokec7 [i * ni + k] * \cf6 \strokec8 B\cf6 \strokec7 [k * nj + j];
\f0\fs26 \cf6 \outl0\strokewidth0 \
			\}\
\cf2 			sum = sum*\cf4 alpha;\cf2 \
			\cf4 cMPI[i*ni + k] = C[i][j]*beta + sum;\cf2 \uc0\u8232 		\}\u8232 	\}\
\}\uc0\u8232 \u8232 int main(int argc, char** argv)\{\
	MPI_Init( &argc, &argv );\
	int size, rank;\
     MPI_Comm_size( MPI_COMM_WORLD, &size );\
     MPI_Comm_rank( MPI_COMM_WORLD, &rank );\
	double timerMPI;\uc0\u8232 	int ni = NI;\u8232 	int nj = NJ;\u8232 	int nk = NK;\u8232 	float alpha;\u8232 	float beta;\u8232 	float (*C)[ni][nj]; C = (float(*)[ni][nj])malloc ((ni) * (nj) * sizeof(float));\u8232 	float (*A)[ni][nk]; A = (float(*)[ni][nk])malloc ((ni) * (nk) * sizeof(float));\u8232 	float (*B)[nk][nj]; B = (float(*)[nk][nj])malloc ((nk) * (nj) * sizeof(float));\
	
\f1\fs24 \cf4 float\cf4  startIdx;\
	float step;
\f0\fs26 \cf2 \
	
\f1\fs24 \cf10 \outl0\strokewidth0 \strokec11 MPI_Bcast\cf10 \strokec12 (A, ni * nk, MPI_INT, \cf10 \strokec13 0\cf10 \strokec12 , MPI_COMM_WORLD);\
\pard\pardeftab720\sl360\partightenfactor0
\cf10 \strokec12      \cf10 \strokec11 MPI_Bcast\cf10 \strokec12 (B, nk * nj, MPI_INT, \cf10 \strokec13 0\cf10 \strokec12 , MPI_COMM_WORLD);\cf2 \strokec14 \
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \outl0\strokewidth0 	\
	float (*cMPI)[ni][nj]; cMPI = (float(*)[ni][nj])malloc ((ni) * (nj) * sizeof(float));\
	float (*cMPI_Res)[ni][nj]; cMPI_Res = (float(*)[ni][nj])malloc ((ni) * (nj) * sizeof(float));\
	if (rank > (
\f1\fs24 \cf4 ni % 
\f0\fs26 \cf4 size\cf2 ))\
	
\f1\fs24 \cf6 \outl0\strokewidth0 \strokec7 	startIdx = nRows / 
\f0\fs26 \cf4 \outl0\strokewidth0 size
\f1\fs24 \cf6 \outl0\strokewidth0 \strokec7  * rank + \cf4 \outl0\strokewidth0 ni % 
\f0\fs26 \cf4 size
\f1\fs24 \cf6 \outl0\strokewidth0 \strokec7 ;\
	else \
		\cf4 \outl0\strokewidth0 startIdx = nRows / 
\f0\fs26 \cf4 size
\f1\fs24 \cf4  * rank + rank;\cf6 \outl0\strokewidth0 \strokec7 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \strokec7      step = nRows / 
\f0\fs26 \cf4 \outl0\strokewidth0 size
\f1\fs24 \cf6 \outl0\strokewidth0 \strokec7  + (rank < nRows % 
\f0\fs26 \cf4 \outl0\strokewidth0 size
\f1\fs24 \cf6 \outl0\strokewidth0 \strokec7 );
\f0\fs26 \cf2 \outl0\strokewidth0 \uc0\u8232 	init_array (ni, nj, nk, &alpha, &beta, *C, *A, *B, *cMPI, *cMPI_Res);\
\pard\pardeftab720\partightenfactor0
\cf2 	MPI_Barrier(MPI_COMM_WORLD);\
	timerMPI = MPI_WTime();\uc0\u8232 \u8232 	kernel_gemm (ni, nj, nk, alpha, beta, *C, *A, *B, \cf4 *cMPI, 
\f1\fs24 \cf4 startIdx, step
\f0\fs26 \cf2 );\
\
	MPI_Barrier(MPI_COMM_WORLD);\
	timerMPI = MPI_WTime() - timerMPI;\uc0\u8232 \u8232 	
\f1\fs24 \cf6 \outl0\strokewidth0 \strokec11 MPI_Reduce\cf6 \strokec12 (cMpi, 
\f0\fs26 \cf2 \outl0\strokewidth0 cMPI_Res
\f1\fs24 \cf6 \outl0\strokewidth0 \strokec12 , cSz, MPI_INT, MPI_SUM, \cf6 \strokec13 0\cf6 \strokec12 , MPI_COMM_WORLD);\
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \strokec12 	print_array (
\f0\fs26 \cf4 \outl0\strokewidth0 ni, nj, *cMPI_Res
\f1\fs24 \cf6 \outl0\strokewidth0 \strokec12 )\
     \cf6 \strokec15 if\cf6 \strokec12  (!rank) \{\
         
\f0\fs26 \cf2 \outl0\strokewidth0 fprintf (stdout, "%f", timerMPI)
\f1\fs24 \cf6 \outl0\strokewidth0 \strokec12 \
     \}\
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \outl0\strokewidth0 \
	\cf4 free((void*)
\f1 cMPI
\f0 );\cf2 \uc0\u8232 	\cf4 free((void*)cMPI_Res);\cf2 \uc0\u8232 	free((void*)C);\u8232 	free((void*)A);\u8232 	free((void*)B);\u8232 	MPI_Finalize();\u8232 	return 0;\u8232 \}}